# frozen_string_literal: true

describe HamlLint::Linter::RuboCop2 do
  context 'autocorrect' do

    # Setting STUB_RUBOCOP=1 makes rubocop tests faster by not involving rubocop.
    # It is sometimes automatically activated for tests which need a different Rubocop version
    let(:stub_rubocop?) do |example|
      requirements = example.metadata[:full_description].scan(/\{%(.*?)%\}/)

      # This can be used by the requirements in eval
      rubocop_version = VersionComparer.new(RuboCop::Version::STRING)
      accepted = requirements.all? do |(requirement)|
        eval(requirement)
      end

      next true unless accepted

      # Doing this last so that exceptions in the requirements always fail
      next true if ENV['STUB_RUBOCOP'] == '1'

      false
    end

    before do
      if stub_rubocop?
        subject.stub(:process_ruby_source).and_return(end_ruby)
      end
    end

    # The goal is not to test rubocop the gem, so no need to test the details using both
    # :safe and :all
    include_context 'linter', autocorrect: :all

    let(:steps_parts) do
      parts = steps_string.split(/[ \t]*---[ \t]*\n/)
      raise "Expected 4 steps, got: #{parts.size}" if parts.size != 4
      parts
    end

    let(:start_haml) { steps_parts[0] }

    let(:start_ruby) { steps_parts[1] }

    let(:end_ruby) { steps_parts[2] }

    let(:end_haml) { steps_parts[3] }

    # Used by the 'linter' context
    let(:haml) { start_haml }


    # steps_string is string of multiple lines describing the steps that
    # the code will take:
    # 1) input haml
    # 2) extracted ruby
    # 3) the corrected ruby
    # 4) the corrected haml
    # Each steps is delimited by a line with ---
    def follows_steps
      syntax_lints = subject.lints.select { |lint| lint.message =~ %r{Lint/Syntax} }
      syntax_lints = syntax_lints.map { |lint| "#{lint.line}:#{lint.message}" }

      if start_ruby.strip != 'SKIP'
        matcher = eq(start_ruby)
        subject.last_extracted_source.source.should(
          matcher,
          -> { "Extracted Ruby is different from expected. #{matcher.failure_message}" }
        )
      end

      syntax_lints.should(be_empty, "Generated Ruby has Syntax Lints:\n#{syntax_lints.join("\n")}")

      if end_ruby.strip != 'SKIP'
        matcher = eq(end_ruby)
        subject.last_new_ruby_source.should(
          matcher,
          -> { "Ruby generated by RuboCop is different from expected. #{matcher.failure_message}" }
        )
      end

      matcher = eq(end_haml)
      document.source.should(
        matcher,
        -> { "Final HAML is different from expected. #{matcher.failure_message}" }
      )

      document.source_was_changed.should be (start_haml != end_haml)
    end

    Dir[__dir__ + '/rubocop_autocorrect_examples/*_examples.txt'].each do |path|
      file_name = File.basename(path)
      examples_from(path).each do |example|
        context "(#{file_name}:#{example.first_line_no}) #{example.name}" do
          let(:steps_string) { example.string }

          let(:options) { super().merge(file: path) }

          it { follows_steps }
        end
      end
    end

    # TO TEST: %tag #{expression}
  end
end
