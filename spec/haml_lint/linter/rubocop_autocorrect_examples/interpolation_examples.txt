!!! fixes plain's interpolation at start of line
#{foo(:bar =>  123)} Lorem Ipsum
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
---
#{foo(bar: 123)} Lorem Ipsum


!!! fixes plain's interpolation in the middle of line
Lorem #{foo(:bar =>  123)} Ipsum
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
---
Lorem #{foo(bar: 123)} Ipsum


!!! fixes plain's interpolation at end of line
Lorem Ipsum #{foo(:bar =>  123)}
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
---
Lorem Ipsum #{foo(bar: 123)}


!!! fixes plain's interpolation placed before a non-interpolation copy
#{foo(:bar =>  123)} Lorem foo(:bar =>  123) Ipsum
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
---
#{foo(bar: 123)} Lorem foo(:bar =>  123) Ipsum


!!! fixes plain's interpolation placed after a non-interpolation copy
Lorem foo(:bar =>  123) Ipsum #{foo(:bar =>  123)}
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
---
Lorem foo(:bar =>  123) Ipsum #{foo(bar: 123)}


!!! fixes identical plain interpolations twice on a line
#{foo(:bar =>  123)} Lorem #{foo(:bar =>  123)} Ipsum
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
haml_lint_marker_4
HL.out = foo(:bar =>  123)
haml_lint_marker_6
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
haml_lint_marker_4
HL.out = foo(bar: 123)
haml_lint_marker_6
---
#{foo(bar: 123)} Lorem #{foo(bar: 123)} Ipsum


!!! fixes plain's interpolation indented by a tag
%tag
  Lorem #{foo(:bar =>  123)} Ipsum
---
if haml_lint_tag_indent
  haml_lint_tag_placeholder
  haml_lint_marker_3
  HL.out = foo(:bar =>  123)
  haml_lint_marker_5
end
---
if haml_lint_tag_indent
  haml_lint_tag_placeholder
  haml_lint_marker_3
  HL.out = foo(bar: 123)
  haml_lint_marker_5
end
---
%tag
  Lorem #{foo(bar: 123)} Ipsum


!!! fixes plain's interpolation indented by a script
- deeper do
  Lorem #{foo(:bar =>  123)} Ipsum
---
haml_lint_marker_1
deeper do
  haml_lint_marker_3
  haml_lint_marker_4
  HL.out = foo(:bar =>  123)
  haml_lint_marker_6
end
---
haml_lint_marker_1
deeper do
  haml_lint_marker_3
  haml_lint_marker_4
  HL.out = foo(bar: 123)
  haml_lint_marker_6
end
---
- deeper do
  Lorem #{foo(bar: 123)} Ipsum


!!! ignores a plain's interpolation prefixed by an escapes
Lorem \#{foo(:bar =>  123)} Ipsum
---
---
---
Lorem \#{foo(:bar =>  123)} Ipsum


!!! Fixes a plain's interpolation prefixed by 2 escapes
Lorem \\#{foo(:bar =>  123)} Ipsum
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
---
Lorem \\#{foo(bar: 123)} Ipsum


!!! ignores aa plain's interpolation prefixed by 3 escapes
Lorem \\\#{foo(:bar =>  123)} Ipsum
---
---
---
Lorem \\\#{foo(:bar =>  123)} Ipsum


!!! fixes plain interpolations on two consecutive lines
Lorem #{foo(:bar =>  123)} Ipsum
Dolor #{abc(:hello =>  42)} Sit Amet
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
haml_lint_marker_4
HL.out = abc(:hello =>  42)
haml_lint_marker_6
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
haml_lint_marker_4
HL.out = abc(hello: 42)
haml_lint_marker_6
---
Lorem #{foo(bar: 123)} Ipsum
Dolor #{abc(hello: 42)} Sit Amet


!!! fixes plain's interpolations on two consecutive lines, with the first one ending in a comma
Lorem #{foo(:bar =>  123)} Ipsum,
Dolor #{abc(:hello =>  42)} Sit Amet
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
haml_lint_marker_4
HL.out = abc(:hello =>  42)
haml_lint_marker_6
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
haml_lint_marker_4
HL.out = abc(hello: 42)
haml_lint_marker_6
---
Lorem #{foo(bar: 123)} Ipsum,
Dolor #{abc(hello: 42)} Sit Amet


!!! fixes plain's interpolations in the middle of multiple lines
Lorem Ipsum
Dolor #{foo(:bar =>  123)} Sit Amet
Consectetur Adipiscing
---
haml_lint_plain_placeholder
haml_lint_marker_2
HL.out = foo(:bar =>  123)
haml_lint_marker_4
haml_lint_plain_placeholder
---
haml_lint_plain_placeholder
haml_lint_marker_2
HL.out = foo(bar: 123)
haml_lint_marker_4
haml_lint_plain_placeholder
---
Lorem Ipsum
Dolor #{foo(bar: 123)} Sit Amet
Consectetur Adipiscing


!!! fixes non-ruby filter's interpolation at start of line
:filter
  #{foo(:bar =>  123)} Lorem Ipsum
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
---
:filter
  #{foo(bar: 123)} Lorem Ipsum


!!! fixes non-ruby filter's interpolation in the middle of line
:filter
  Lorem #{foo(:bar =>  123)} Ipsum
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
---
:filter
  Lorem #{foo(bar: 123)} Ipsum


!!! fixes non-ruby filter's interpolation at end of line
:filter
  Lorem Ipsum #{foo(:bar =>  123)}
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
---
:filter
  Lorem Ipsum #{foo(bar: 123)}


!!! fixes non-ruby filter's interpolation placed before a non-interpolation copy
:filter
  #{foo(:bar =>  123)} Lorem foo(:bar =>  123) Ipsum
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
---
:filter
  #{foo(bar: 123)} Lorem foo(:bar =>  123) Ipsum


!!! fixes non-ruby filter's interpolation placed after a non-interpolation copy
:filter
  Lorem foo(:bar =>  123) Ipsum #{foo(:bar =>  123)}
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
---
:filter
  Lorem foo(:bar =>  123) Ipsum #{foo(bar: 123)}


!!! fixes identical non-ruby filter's interpolations twice on a line
:filter
  #{foo(:bar =>  123)} Lorem #{foo(:bar =>  123)} Ipsum
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
haml_lint_marker_4
HL.out = foo(:bar =>  123)
haml_lint_marker_6
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
haml_lint_marker_4
HL.out = foo(bar: 123)
haml_lint_marker_6
---
:filter
  #{foo(bar: 123)} Lorem #{foo(bar: 123)} Ipsum


!!! fixes non-ruby filter's interpolation indented by a tag
%tag
  :filter
    Lorem #{foo(:bar =>  123)} Ipsum
---
if haml_lint_tag_indent
  haml_lint_tag_placeholder
  haml_lint_marker_3
  HL.out = foo(:bar =>  123)
  haml_lint_marker_5
end
---
if haml_lint_tag_indent
  haml_lint_tag_placeholder
  haml_lint_marker_3
  HL.out = foo(bar: 123)
  haml_lint_marker_5
end
---
%tag
  :filter
    Lorem #{foo(bar: 123)} Ipsum


!!! fixes non-ruby filter's interpolation indented by a script
- deeper do
  :filter
    Lorem #{foo(:bar =>  123)} Ipsum
---
haml_lint_marker_1
deeper do
  haml_lint_marker_3
  haml_lint_marker_4
  HL.out = foo(:bar =>  123)
  haml_lint_marker_6
end
---
haml_lint_marker_1
deeper do
  haml_lint_marker_3
  haml_lint_marker_4
  HL.out = foo(bar: 123)
  haml_lint_marker_6
end
---
- deeper do
  :filter
    Lorem #{foo(bar: 123)} Ipsum


!!! ignores a non-ruby filter's interpolation prefixed by an escapes
:filter
  Lorem \#{foo(:bar =>  123)} Ipsum
---
haml_lint_filter_placeholder
---
haml_lint_filter_placeholder
---
:filter
  Lorem \#{foo(:bar =>  123)} Ipsum


!!! Fixes a non-ruby filter's interpolation prefixed by 2 escapes
:filter
  Lorem \\#{foo(:bar =>  123)} Ipsum
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
---
:filter
  Lorem \\#{foo(bar: 123)} Ipsum


!!! ignores a non-ruby filter's interpolation prefixed by 3 escapes
:filter
  Lorem \\\#{foo(:bar =>  123)} Ipsum
---
haml_lint_filter_placeholder
---
haml_lint_filter_placeholder
---
:filter
  Lorem \\\#{foo(:bar =>  123)} Ipsum


!!! fixes plain's interpolations in the middle of multiple lines
Lorem Ipsum
Dolor #{foo(:bar =>  123)} Sit Amet
Consectetur Adipiscing
---
haml_lint_plain_placeholder
haml_lint_marker_2
HL.out = foo(:bar =>  123)
haml_lint_marker_4
haml_lint_plain_placeholder
---
haml_lint_plain_placeholder
haml_lint_marker_2
HL.out = foo(bar: 123)
haml_lint_marker_4
haml_lint_plain_placeholder
---
Lorem Ipsum
Dolor #{foo(bar: 123)} Sit Amet
Consectetur Adipiscing

!!! fixes non-ruby filter's interpolations on two consecutive lines
:filter
  Lorem #{foo(:bar =>  123)} Ipsum
  Dolor #{abc(:hello =>  42)} Sit Amet
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
haml_lint_marker_4
HL.out = abc(:hello =>  42)
haml_lint_marker_6
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
haml_lint_marker_4
HL.out = abc(hello: 42)
haml_lint_marker_6
---
:filter
  Lorem #{foo(bar: 123)} Ipsum
  Dolor #{abc(hello: 42)} Sit Amet


!!! fixes non-ruby filter's interpolations on two consecutive lines, with the first one ending in a comma
:filter
  Lorem #{foo(:bar =>  123)} Ipsum,
  Dolor #{abc(:hello =>  42)} Sit Amet
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
haml_lint_marker_4
HL.out = abc(:hello =>  42)
haml_lint_marker_6
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
haml_lint_marker_4
HL.out = abc(hello: 42)
haml_lint_marker_6
---
:filter
  Lorem #{foo(bar: 123)} Ipsum,
  Dolor #{abc(hello: 42)} Sit Amet


!!! fixes non-ruby filter's interpolations in the middle of multiple lines
:filter
  Lorem Ipsum
    Dolor #{foo(:bar =>  123)} Sit Amet<%= '  '%>
  Consectetur Adipiscing
---
haml_lint_marker_1
HL.out = foo(:bar =>  123)
haml_lint_marker_3
---
haml_lint_marker_1
HL.out = foo(bar: 123)
haml_lint_marker_3
---
:filter
  Lorem Ipsum
    Dolor #{foo(bar: 123)} Sit Amet<%= '  '%>
  Consectetur Adipiscing
