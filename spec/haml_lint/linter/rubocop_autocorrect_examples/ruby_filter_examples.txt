!# These are examples of how the script behave
!# Comments that are not executed start with !#
!# This is passed through erb for cases where that is useful

!# The examples are in 4 steps:
!# 1) input haml
!# 2) extracted ruby
!# 3) the corrected ruby
!# 4) the corrected haml
!# Each steps is delimited by a line with ---

!# Examples start with a !!! followed by the name
!# If an example's steps contains the ^ character, it will be
!# executed twice:
!# * once with the ^ replaced by -, ^^ are removed and %% are removed
!# * once with the ^ replaced by =, ^^ replace by the special prefix
!#   used by haml-lint in the ruby code to handle = scripts,
!#   and %% replaced by as many spaces as takes (to indent multi-line scripts)
!# This way, the same examples can be reused for silent and non-silent scripts.

!!! fixes a single-line one
:ruby
  foo(:bar =>  123)
---
haml_lint_marker_1
foo(:bar =>  123)
haml_lint_marker_3
---
haml_lint_marker_1
foo(bar: 123)
haml_lint_marker_3
---
:ruby
  foo(bar: 123)


!!! leave a correct single-line as-is
:ruby
  foo(bar: 123)
---
haml_lint_marker_1
foo(bar: 123)
haml_lint_marker_3
---
haml_lint_marker_1
foo(bar: 123)
haml_lint_marker_3
---
:ruby
  foo(bar: 123)


!!!fixes a multi-line one
:ruby
  foo(:bar =>  123)
  abc(:hello =>  42)
---
haml_lint_marker_1
foo(:bar =>  123)
abc(:hello =>  42)
haml_lint_marker_4
---
haml_lint_marker_1
foo(bar: 123)
abc(hello: 42)
haml_lint_marker_4
---
:ruby
  foo(bar: 123)
  abc(hello: 42)


!!! with a blank line between
:ruby
  foo(:bar =>  123)

  abc(:hello =>  42)
---
haml_lint_marker_1
foo(:bar =>  123)

abc(:hello =>  42)
haml_lint_marker_5
---
haml_lint_marker_1
foo(bar: 123)

abc(hello: 42)
haml_lint_marker_5
---
:ruby
  foo(bar: 123)

  abc(hello: 42)


!!! with indentation inside
:ruby
  if spam
    foo(:bar =>  123)
    abc(:hello =>  42)
  end
---
haml_lint_marker_1
if spam
  foo(:bar =>  123)
  abc(:hello =>  42)
end
haml_lint_marker_6
---
haml_lint_marker_1
if spam
  foo(bar: 123)
  abc(hello: 42)
end
haml_lint_marker_6
---
:ruby
  if spam
    foo(bar: 123)
    abc(hello: 42)
  end


!!! removes extra indentation inside
:ruby
  if spam
        foo(:bar =>  123)
        abc(:hello =>  42)
  end
---
haml_lint_marker_1
if spam
      foo(:bar =>  123)
      abc(:hello =>  42)
end
haml_lint_marker_6
---
haml_lint_marker_1
if spam
  foo(bar: 123)
  abc(hello: 42)
end
haml_lint_marker_6
---
:ruby
  if spam
    foo(bar: 123)
    abc(hello: 42)
  end


!!! adds missing indentation inside
:ruby
  if spam
  foo(:bar =>  123)
  abc(:hello =>  42)
  end
---
haml_lint_marker_1
if spam
foo(:bar =>  123)
abc(:hello =>  42)
end
haml_lint_marker_6
---
haml_lint_marker_1
if spam
  foo(bar: 123)
  abc(hello: 42)
end
haml_lint_marker_6
---
:ruby
  if spam
    foo(bar: 123)
    abc(hello: 42)
  end

!!! fixes by adding empty lines
:ruby
  def a; end
  def b; end
---
haml_lint_marker_1
def a; end
def b; end
haml_lint_marker_4
---
haml_lint_marker_1
def a; end

def b; end
haml_lint_marker_4
---
:ruby
  def a; end

  def b; end


!!! while moving empty lines
:ruby
  def a; end
  def b; end

  # The empty-line above can mess with the merging logic
---
haml_lint_marker_1
def a; end
def b; end

# The empty-line above can mess with the merging logic
haml_lint_marker_6
---
haml_lint_marker_1
def a; end

def b; end

# The empty-line above can mess with the merging logic
haml_lint_marker_6
---
:ruby
  def a; end

  def b; end

  # The empty-line above can mess with the merging logic


!!! that was indented by a tag
%tag
  :ruby
    foo(:bar =>  123)
---
if haml_lint_tag_indent
  haml_lint_marker_2
  foo(:bar =>  123)
  haml_lint_marker_4
end
---
if haml_lint_tag_indent
  haml_lint_marker_2
  foo(bar: 123)
  haml_lint_marker_4
end
---
%tag
  :ruby
    foo(bar: 123)


!!! that was indented by ruby code
^ deeper do
  :ruby
    foo(:bar =>  123)
---
haml_lint_marker_1
^^deeper do
  haml_lint_marker_3
  haml_lint_marker_4
  foo(:bar =>  123)
  haml_lint_marker_6
end
---
haml_lint_marker_1
^^deeper do
  haml_lint_marker_3
  haml_lint_marker_4
  foo(bar: 123)
  haml_lint_marker_6
end
---
^ deeper do
  :ruby
    foo(bar: 123)
